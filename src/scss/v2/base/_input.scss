input[type="text"],
input[type="number"] {
  background: transparent;
  border: 0;
  border-bottom: 2px solid $c-black;
  border-radius: 0;
  font-size: 20px;
  font-family: $font-stack-base;
  font-weight: bold;
  display: flex;
  line-height: 1;
  align-items: center;
  justify-content: center;
  text-align: center;
  width: 100%;

  &:hover,
  &:focus {
    border-color: $c-blue;
    color: $c-blue;
    text-shadow: none;
    box-shadow: none;
  }
}

button {
  font-family: $font-stack-label;
  font-size: $font-tiny;
  font-weight: bold;
  padding: 0 $padding-sm;
}

// Expandable textareas.
// @see CharBackgrounds.vue for an example.
// @see https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/
.grow-wrap {
  display: grid;

  // Pseudo element provides the height and needs to be visually hidden.
  &::after {
    content: attr(data-replicated-value) " ";
    white-space: pre-wrap;
    visibility: hidden;
  }

  // Disable textarea behavior.
  > textarea {
    resize: none;
    overflow: hidden;
    background: transparent;

    // Match focus behavior from other inputs.
    &:hover,
    &:focus {
      border-color: $c-blue;
      color: $c-blue;
      text-shadow: none;
      box-shadow: none;
      background: transparent;
    }
  }

  // Pseudo element and textarea need to have an *identical* height. This
  // means the font size, padding, height, etc. have to be set for both.
  &::after,
  > textarea {
    border: none;
    padding: 5px;
    font: inherit;
    grid-area: 1 / 1 / 2 / 2;
    height: auto;
    min-height: 0;
    text-align: left;
    border-radius: 0;
    line-height: 1.1;
  }
}